main_data_full['treatment_period'] = main_data_full$treatment_assigned_period
outcome = main_data_full$fluency_score_imputed
n_treatment = length(c('t1a','t1b','t1c','t2a','t2b','t2c','c'))
school_encoding = generateEncoding(main_data_full$academycode)
stratify_encoded = encodeLabels(main_data_full$academycode, school_encoding)
student_encoding = generateEncoding(main_data_full$studyid)
student_encoded = encodeLabels(main_data_full$studyid, student_encoding)
period_encoding = generateEncoding(main_data_full$period)
period_encoded = encodeLabels(main_data_full$period, period_encoding)
x_mat = data.frame('const' = rep(1, length(outcome)))
x_mat['t1a'] = as.numeric(main_data_full$treatment_old == 't1a' |
main_data_full$treatment_old == 'T1_A') * main_data_full$treatment_period
x_mat['t1b'] = as.numeric(main_data_full$treatment_old == 't1b'|
main_data_full$treatment_old == 'T1_B') * main_data_full$treatment_period
x_mat['t1c'] = as.numeric(main_data_full$treatment_old == 't1c'|
main_data_full$treatment_old == 'T1_C') * main_data_full$treatment_period
x_mat['t2a'] = as.numeric(main_data_full$treatment_old == 't2a'|
main_data_full$treatment_old == 'T2_A') * main_data_full$treatment_period
x_mat['t2b'] = as.numeric(main_data_full$treatment_old == 't2b'|
main_data_full$treatment_old == 'T2_B') * main_data_full$treatment_period
x_mat['t2c'] = as.numeric(main_data_full$treatment_old == 't2c'|
main_data_full$treatment_old == 'T2_C') * main_data_full$treatment_period
# Remove the constant (if needed)
#x_mat = x_mat[,-1]
# Data check
table(x_mat$t1a, treatment)
# Add data to STAN list
linear_hierarchical_data = list(N = length(outcome),
P = dim(x_mat)[2],
J = length(unique(stratify_encoded)),
S = length(unique(student_encoded)),
Ti = length(unique(period_encoded)),
x = as.matrix(x_mat),
y = outcome,
jj = stratify_encoded,
ss = student_encoded,
tt = period_encoded)
n_students1 = length(unique(main_data_full$studyid))
nstudents1
n_students1
flag_remove_schools_rounding = F
# Open dataset
main_file_name = '211011_cwpm_no_complete_panel_no_imputed.csv'
#main_file_name = '211011_cwpm_complete_panel_no_imputed.csv'
main_data_full = read.csv(paste('./bridge/data/main_datasets/', main_file_name, sep = ''))
# Remove new data points:
# Old baseline
old_raw_data0 = read.csv('./bridge/data/main_datasets/210506_G1Fluency_data.csv')
old_raw_data0 = old_raw_data0[c('studyid', 'et_fluency')]
colnames(old_raw_data0) = c('studyid', 'fluency_score_old')
old_raw_data0$period = 0
# Old wave 1
old_raw_data1 = read.csv('./bridge/data/wave1/cwpm/210617_clean_fluency.csv')
old_raw_data1 = old_raw_data1[c('studyid', 'score_fluency')]
colnames(old_raw_data1) = c('studyid', 'fluency_score_old')
old_raw_data1$period = 1
# Old wave 2
old_raw_data2 = read.csv('./bridge/data/wave2/cwpm/210713_scores_by_pupil_raw.csv', sep = ';')
old_raw_data2 = old_raw_data2[old_raw_data2$Title == 'Fluency Assessment', ]
old_raw_data2 = old_raw_data2[c('StudyID', 'Score')]
colnames(old_raw_data2) = c('studyid', 'fluency_score_old')
old_raw_data2$period = 2
old_raw_data = rbind(old_raw_data0, old_raw_data1, old_raw_data2)
main_data_full = merge(main_data_full, old_raw_data, by = c('studyid', 'period'))
# Remove obs with missing scores
main_data_full = main_data_full[!is.na(main_data_full$fluency_score_old), ]
# Remove obs with incomplete information
main_data_full = main_data_full %>%
group_by(studyid) %>%
mutate(n_obs = n()) %>%
as.data.frame()
main_data_full = main_data_full[main_data_full$n_obs >= 2, ]
loginfo('Model 1: No controls (only ET) + no dummy out')
loginfo(paste('Number of observations:', dim(main_data_full)[1]))
if(flag_remove_schools_rounding) {
flagged_schools_rounding = c(17437, 44017, 55546, 68531, 77606, 93802, 99653)
main_data_full = main_data_full[!(main_data_full$academycode %in% flagged_schools_rounding), ]
loginfo(paste('Number of observations:', dim(main_data_full)[1]))
}
dim3 = dim(main_data_full)[1]
#main_data_full['treatment_old'] = main_data_full$treatment_received_overall
main_data_full['treatment_old'] = main_data_full$treatment_assigned_overall
#treatment_encoding = generateEncoding(c('t1a','t1b','t1c','t2a','t2b','t2c', 'c'), sort_treat = F)
treatment_encoding = generateEncoding(c('T1_A','T1_B','T1_C','T2_A','T2_B','T2_C', 'C'), sort_treat = F)
treatment = encodeLabels(main_data_full$treatment_old, treatment_encoding)
main_data_full['treatment'] = treatment
#main_data_full['treatment_period'] = main_data_full$treatment_received_period
main_data_full['treatment_period'] = main_data_full$treatment_assigned_period
outcome = main_data_full$fluency_score_old
n_treatment = length(c('t1a','t1b','t1c','t2a','t2b','t2c','c'))
school_encoding = generateEncoding(main_data_full$academycode)
stratify_encoded = encodeLabels(main_data_full$academycode, school_encoding)
student_encoding = generateEncoding(main_data_full$studyid)
student_encoded = encodeLabels(main_data_full$studyid, student_encoding)
period_encoding = generateEncoding(main_data_full$period)
period_encoded = encodeLabels(main_data_full$period, period_encoding)
x_mat = data.frame('const' = rep(1, length(outcome)))
x_mat['t1a'] = as.numeric(main_data_full$treatment_old == 't1a' |
main_data_full$treatment_old == 'T1_A') * main_data_full$treatment_period
x_mat['t1b'] = as.numeric(main_data_full$treatment_old == 't1b'|
main_data_full$treatment_old == 'T1_B') * main_data_full$treatment_period
x_mat['t1c'] = as.numeric(main_data_full$treatment_old == 't1c'|
main_data_full$treatment_old == 'T1_C') * main_data_full$treatment_period
x_mat['t2a'] = as.numeric(main_data_full$treatment_old == 't2a'|
main_data_full$treatment_old == 'T2_A') * main_data_full$treatment_period
x_mat['t2b'] = as.numeric(main_data_full$treatment_old == 't2b'|
main_data_full$treatment_old == 'T2_B') * main_data_full$treatment_period
x_mat['t2c'] = as.numeric(main_data_full$treatment_old == 't2c'|
main_data_full$treatment_old == 'T2_C') * main_data_full$treatment_period
# Remove the constant (if needed)
#x_mat = x_mat[,-1]
# Data check
table(x_mat$t1a, treatment)
# Add data to STAN list
linear_hierarchical_data = list(N = length(outcome),
P = dim(x_mat)[2],
J = length(unique(stratify_encoded)),
S = length(unique(student_encoded)),
Ti = length(unique(period_encoded)),
x = as.matrix(x_mat),
y = outcome,
jj = stratify_encoded,
ss = student_encoded,
tt = period_encoded)
n_students3 = length(unique(main_data_full$studyid))
table(main_data_full$period)
n_students
n_students3
# Author: Bruno Esposito
rm(list = ls())
devtools::load_all()
library(logging)
library(bayesplot)
library(lme4)
library(BayesPostEst)
set.seed(09052021)
source('scripts/util/stan_utility.R')
start_time = Sys.time()
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
flag_treatment_assgined = T
# Model 1: CWPM Balanced Panel - No schools removed ----
flag_remove_schools_rounding = F
# Open dataset
#main_file_name = '211011_cwpm_no_complete_panel_no_imputed.csv'
main_file_name = '211011_cwpm_complete_panel_no_imputed.csv'
main_data_full = read.csv(paste('./bridge/data/main_datasets/', main_file_name, sep = ''))
loginfo('Model 1: No controls (only ET) + no dummy out')
loginfo(paste('Number of observations:', dim(main_data_full)[1]))
if(flag_remove_schools_rounding) {
flagged_schools_rounding = c(17437, 44017, 55546, 68531, 77606, 93802, 99653)
main_data_full = main_data_full[!(main_data_full$academycode %in% flagged_schools_rounding), ]
loginfo(paste('Number of observations:', dim(main_data_full)[1]))
}
#main_data_full['treatment_old'] = main_data_full$treatment_received_overall
main_data_full['treatment_old'] = main_data_full$treatment_assigned_overall
#treatment_encoding = generateEncoding(c('t1a','t1b','t1c','t2a','t2b','t2c', 'c'), sort_treat = F)
treatment_encoding = generateEncoding(c('T1_A','T1_B','T1_C','T2_A','T2_B','T2_C', 'C'), sort_treat = F)
treatment = encodeLabels(main_data_full$treatment_old, treatment_encoding)
main_data_full['treatment'] = treatment
#main_data_full['treatment_period'] = main_data_full$treatment_received_period
main_data_full['treatment_period'] = main_data_full$treatment_assigned_period
outcome = main_data_full$fluency_score_imputed
n_treatment = length(c('t1a','t1b','t1c','t2a','t2b','t2c','c'))
# Add engagement data ----
raw_data_wave1 = read.csv('./bridge/data/wave1/engagement/210610_clean_data.csv')
final_treatment_w1 = read.csv('./bridge/data/main_datasets/210511_w1_finaltreatment.csv', sep = ';')
names(final_treatment_w1) = c('studyid', 'treatment_final')
academy_optin_df = read.csv('./bridge/data/main_datasets/210812_wave1_final_allocation_opt_in.csv', sep = ',')
final_treatment_w1$treatment_final = substr(final_treatment_w1$treatment_final, 0, 4)
final_treatment_w1$treatment_final = sapply(final_treatment_w1$treatment_final, gsub, pattern='_', replacement='')
final_treatment_w1$wave = 1
raw_data_wave1 = merge(raw_data_wave1, final_treatment_w1, by = 'studyid', all.x = T)
raw_data_wave1 = merge(raw_data_wave1, academy_optin_df[c('studyid', 'academycode_optin')], by = 'studyid')
# Open Wave 2
# Check that you are working with the latest data!
raw_data_wave2 = read.csv('./bridge/data/wave2/engagement/210716_clean_data.csv')
final_treatment_w2 = read.csv('./bridge/data/main_datasets/210812_wave2_final_allocation_opt_in.csv')
final_treatment_w2$treatment_final = tolower(sapply(final_treatment_w2$treatment, gsub, pattern='_', replacement=''))
final_treatment_w2 = final_treatment_w2[c('studyid', 'treatment_final', 'academycode_optin')]
final_treatment_w2$wave = 2
raw_data_wave2 = merge(raw_data_wave2, final_treatment_w2, by = 'studyid', all.x = T)
raw_data = rbind(raw_data_wave1, raw_data_wave2)
# Process treatment & outcomes
raw_data['treatment_old'] = raw_data$treatment_final
treatment_encoding = generateEncoding(c('t1a','t1b','t1c','t2a','t2b','t2c'), sort_treat = F)
treatment = encodeLabels(raw_data$treatment_old, treatment_encoding)
raw_data['treatment'] = treatment
# Merge with fluency
main_data_full = merge(main_data_full, raw_data[,c('studyid', 'total_times_started_ex')], by = 'studyid', all.x = T)
main_data_full$total_times_started_ex[is.na(main_data_full$total_times_started_ex)] = 0
main_data_full$engagement = main_data_full$total_times_started_ex * main_data_full$treatment_period
# Set up variables for STAN
school_encoding = generateEncoding(main_data_full$academycode)
stratify_encoded = encodeLabels(main_data_full$academycode, school_encoding)
student_encoding = generateEncoding(main_data_full$studyid)
student_encoded = encodeLabels(main_data_full$studyid, student_encoding)
period_encoding = generateEncoding(main_data_full$period)
period_encoded = encodeLabels(main_data_full$period, period_encoding)
x_mat = data.frame('const' = rep(1, length(outcome)))
x_mat['engage'] = main_data_full$total_times_started_ex
x_mat['t1a'] = as.numeric(main_data_full$treatment_old == 't1a' |
main_data_full$treatment_old == 'T1_A') * main_data_full$treatment_period
x_mat['t1b'] = as.numeric(main_data_full$treatment_old == 't1b'|
main_data_full$treatment_old == 'T1_B') * main_data_full$treatment_period
x_mat['t1c'] = as.numeric(main_data_full$treatment_old == 't1c'|
main_data_full$treatment_old == 'T1_C') * main_data_full$treatment_period
x_mat['t2a'] = as.numeric(main_data_full$treatment_old == 't2a'|
main_data_full$treatment_old == 'T2_A') * main_data_full$treatment_period
x_mat['t2b'] = as.numeric(main_data_full$treatment_old == 't2b'|
main_data_full$treatment_old == 'T2_B') * main_data_full$treatment_period
x_mat['t2c'] = as.numeric(main_data_full$treatment_old == 't2c'|
main_data_full$treatment_old == 'T2_C') * main_data_full$treatment_period
dim1 = dim(x_mat)[1]
main_data_full = cbind(main_data_full, x_mat)
a = lmer(fluency_score_imputed ~ t1a + t1b + t1c + t2a + t2b + t2c + (1 | academycode) + (1 | studyid) + (1 | period), data = main_data_full)
summary(a)
b = lmer(fluency_score_imputed ~ t1a + t1b + t1c + t2a + t2b + t2c + total_times_started_ex + (1 | academycode) + (1 | studyid) + (1 | period), data = main_data_full)
summary(b)
linear_hierarchical_data = list(N = length(outcome),
P = dim(x_mat)[2],
J = length(unique(stratify_encoded)),
S = length(unique(student_encoded)),
Ti = length(unique(period_encoded)),
x = as.matrix(x_mat),
y = outcome,
jj = stratify_encoded,
ss = student_encoded,
tt = period_encoded)
n_students1 = length(unique(main_data_full$studyid))
n_students1
flag_remove_schools_rounding = F
# Open dataset
main_file_name = '211011_cwpm_no_complete_panel_no_imputed.csv'
#main_file_name = '211011_cwpm_complete_panel_no_imputed.csv'
main_data_full = read.csv(paste('./bridge/data/main_datasets/', main_file_name, sep = ''))
loginfo('Model 1: No controls (only ET) + no dummy out')
loginfo(paste('Number of observations:', dim(main_data_full)[1]))
if(flag_remove_schools_rounding) {
flagged_schools_rounding = c(17437, 44017, 55546, 68531, 77606, 93802, 99653)
main_data_full = main_data_full[!(main_data_full$academycode %in% flagged_schools_rounding), ]
loginfo(paste('Number of observations:', dim(main_data_full)[1]))
}
#main_data_full['treatment_old'] = main_data_full$treatment_received_overall
main_data_full['treatment_old'] = main_data_full$treatment_assigned_overall
#treatment_encoding = generateEncoding(c('t1a','t1b','t1c','t2a','t2b','t2c', 'c'), sort_treat = F)
treatment_encoding = generateEncoding(c('T1_A','T1_B','T1_C','T2_A','T2_B','T2_C', 'C'), sort_treat = F)
treatment = encodeLabels(main_data_full$treatment_old, treatment_encoding)
main_data_full['treatment'] = treatment
#main_data_full['treatment_period'] = main_data_full$treatment_received_period
main_data_full['treatment_period'] = main_data_full$treatment_assigned_period
outcome = main_data_full$fluency_score_imputed
n_treatment = length(c('t1a','t1b','t1c','t2a','t2b','t2c','c'))
# Add engagement data ----
raw_data_wave1 = read.csv('./bridge/data/wave1/engagement/210610_clean_data.csv')
final_treatment_w1 = read.csv('./bridge/data/main_datasets/210511_w1_finaltreatment.csv', sep = ';')
names(final_treatment_w1) = c('studyid', 'treatment_final')
academy_optin_df = read.csv('./bridge/data/main_datasets/210812_wave1_final_allocation_opt_in.csv', sep = ',')
final_treatment_w1$treatment_final = substr(final_treatment_w1$treatment_final, 0, 4)
final_treatment_w1$treatment_final = sapply(final_treatment_w1$treatment_final, gsub, pattern='_', replacement='')
final_treatment_w1$wave = 1
raw_data_wave1 = merge(raw_data_wave1, final_treatment_w1, by = 'studyid', all.x = T)
raw_data_wave1 = merge(raw_data_wave1, academy_optin_df[c('studyid', 'academycode_optin')], by = 'studyid')
# Open Wave 2
# Check that you are working with the latest data!
raw_data_wave2 = read.csv('./bridge/data/wave2/engagement/210716_clean_data.csv')
final_treatment_w2 = read.csv('./bridge/data/main_datasets/210812_wave2_final_allocation_opt_in.csv')
final_treatment_w2$treatment_final = tolower(sapply(final_treatment_w2$treatment, gsub, pattern='_', replacement=''))
final_treatment_w2 = final_treatment_w2[c('studyid', 'treatment_final', 'academycode_optin')]
final_treatment_w2$wave = 2
raw_data_wave2 = merge(raw_data_wave2, final_treatment_w2, by = 'studyid', all.x = T)
raw_data = rbind(raw_data_wave1, raw_data_wave2)
raw_data['treatment_old'] = raw_data$treatment_final
treatment_encoding = generateEncoding(c('t1a','t1b','t1c','t2a','t2b','t2c'), sort_treat = F)
treatment = encodeLabels(raw_data$treatment_old, treatment_encoding)
raw_data['treatment'] = treatment
# Merge with fluency
main_data_full = merge(main_data_full, raw_data[,c('studyid', 'total_times_started_ex')], by = 'studyid', all.x = T)
main_data_full$total_times_started_ex[is.na(main_data_full$total_times_started_ex)] = 0
main_data_full$engagement = main_data_full$total_times_started_ex * main_data_full$treatment_period
# Set up variables for STAN
school_encoding = generateEncoding(main_data_full$academycode)
stratify_encoded = encodeLabels(main_data_full$academycode, school_encoding)
student_encoding = generateEncoding(main_data_full$studyid)
student_encoded = encodeLabels(main_data_full$studyid, student_encoding)
period_encoding = generateEncoding(main_data_full$period)
period_encoded = encodeLabels(main_data_full$period, period_encoding)
x_mat = data.frame('const' = rep(1, length(outcome)))
x_mat['engage'] = main_data_full$total_times_started_ex
x_mat['t1a'] = as.numeric(main_data_full$treatment_old == 't1a' |
main_data_full$treatment_old == 'T1_A') * main_data_full$treatment_period
x_mat['t1b'] = as.numeric(main_data_full$treatment_old == 't1b'|
main_data_full$treatment_old == 'T1_B') * main_data_full$treatment_period
x_mat['t1c'] = as.numeric(main_data_full$treatment_old == 't1c'|
main_data_full$treatment_old == 'T1_C') * main_data_full$treatment_period
x_mat['t2a'] = as.numeric(main_data_full$treatment_old == 't2a'|
main_data_full$treatment_old == 'T2_A') * main_data_full$treatment_period
x_mat['t2b'] = as.numeric(main_data_full$treatment_old == 't2b'|
main_data_full$treatment_old == 'T2_B') * main_data_full$treatment_period
x_mat['t2c'] = as.numeric(main_data_full$treatment_old == 't2c'|
main_data_full$treatment_old == 'T2_C') * main_data_full$treatment_period
dim3 = dim(x_mat)[1]
n_students3 = length(unique(main_data_full$studyid))
n_students3
flag_remove_schools_rounding = F
# Open dataset
main_file_name = '211011_cwpm_no_complete_panel_no_imputed.csv'
#main_file_name = '211011_cwpm_complete_panel_no_imputed.csv'
main_data_full = read.csv(paste('./bridge/data/main_datasets/', main_file_name, sep = ''))
loginfo('Model 1: No controls (only ET) + no dummy out')
loginfo(paste('Number of observations:', dim(main_data_full)[1]))
if(flag_remove_schools_rounding) {
flagged_schools_rounding = c(17437, 44017, 55546, 68531, 77606, 93802, 99653)
main_data_full = main_data_full[!(main_data_full$academycode %in% flagged_schools_rounding), ]
loginfo(paste('Number of observations:', dim(main_data_full)[1]))
}
dim3 = dim(main_data_full)[1]
#main_data_full['treatment_old'] = main_data_full$treatment_received_overall
main_data_full['treatment_old'] = main_data_full$treatment_assigned_overall
#treatment_encoding = generateEncoding(c('t1a','t1b','t1c','t2a','t2b','t2c', 'c'), sort_treat = F)
treatment_encoding = generateEncoding(c('T1_A','T1_B','T1_C','T2_A','T2_B','T2_C', 'C'), sort_treat = F)
treatment = encodeLabels(main_data_full$treatment_old, treatment_encoding)
main_data_full['treatment'] = treatment
#main_data_full['treatment_period'] = main_data_full$treatment_received_period
main_data_full['treatment_period'] = main_data_full$treatment_assigned_period
outcome = main_data_full$fluency_score_imputed
n_treatment = length(c('t1a','t1b','t1c','t2a','t2b','t2c','c'))
school_encoding = generateEncoding(main_data_full$academycode)
stratify_encoded = encodeLabels(main_data_full$academycode, school_encoding)
student_encoding = generateEncoding(main_data_full$studyid)
student_encoded = encodeLabels(main_data_full$studyid, student_encoding)
period_encoding = generateEncoding(main_data_full$period)
period_encoded = encodeLabels(main_data_full$period, period_encoding)
x_mat = data.frame('const' = rep(1, length(outcome)))
x_mat['t1a'] = as.numeric(main_data_full$treatment_old == 't1a' |
main_data_full$treatment_old == 'T1_A') * main_data_full$treatment_period
x_mat['t1b'] = as.numeric(main_data_full$treatment_old == 't1b'|
main_data_full$treatment_old == 'T1_B') * main_data_full$treatment_period
x_mat['t1c'] = as.numeric(main_data_full$treatment_old == 't1c'|
main_data_full$treatment_old == 'T1_C') * main_data_full$treatment_period
x_mat['t2a'] = as.numeric(main_data_full$treatment_old == 't2a'|
main_data_full$treatment_old == 'T2_A') * main_data_full$treatment_period
x_mat['t2b'] = as.numeric(main_data_full$treatment_old == 't2b'|
main_data_full$treatment_old == 'T2_B') * main_data_full$treatment_period
x_mat['t2c'] = as.numeric(main_data_full$treatment_old == 't2c'|
main_data_full$treatment_old == 'T2_C') * main_data_full$treatment_period
# Remove the constant (if needed)
#x_mat = x_mat[,-1]
# Data check
table(x_mat$t1a, treatment)
# Author: Bruno Esposito
# This script generates an staggered diff-in-diff model.
# Last modification: 22/10/2021
rm(list = ls())
devtools::load_all()
library(logging)
library(bayesplot)
library(ggplot2)
library(BayesPostEst)
set.seed(09052021)
source('scripts/util/stan_utility.R')
start_time = Sys.time()
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
flag_remove_schools_rounding = F
# Open dataset
main_file_name = '211011_cwpm_no_complete_panel_no_imputed.csv'
#main_file_name = '211011_cwpm_complete_panel_no_imputed.csv'
main_data_full = read.csv(paste('./bridge/data/main_datasets/', main_file_name, sep = ''))
loginfo('Model 1: No controls (only ET) + no dummy out')
loginfo(paste('Number of observations:', dim(main_data_full)[1]))
if(flag_remove_schools_rounding) {
flagged_schools_rounding = c(17437, 44017, 55546, 68531, 77606, 93802, 99653)
main_data_full = main_data_full[!(main_data_full$academycode %in% flagged_schools_rounding), ]
loginfo(paste('Number of observations:', dim(main_data_full)[1]))
}
dim3 = dim(main_data_full)[1]
#main_data_full['treatment_old'] = main_data_full$treatment_received_overall
main_data_full['treatment_old'] = main_data_full$treatment_assigned_overall
#treatment_encoding = generateEncoding(c('t1a','t1b','t1c','t2a','t2b','t2c', 'c'), sort_treat = F)
treatment_encoding = generateEncoding(c('T1_A','T1_B','T1_C','T2_A','T2_B','T2_C', 'C'), sort_treat = F)
treatment = encodeLabels(main_data_full$treatment_old, treatment_encoding)
main_data_full['treatment'] = treatment
#main_data_full['treatment_period'] = main_data_full$treatment_received_period
main_data_full['treatment_period'] = main_data_full$treatment_assigned_period
outcome = main_data_full$fluency_score_imputed
n_treatment = length(c('t1a','t1b','t1c','t2a','t2b','t2c','c'))
school_encoding = generateEncoding(main_data_full$academycode)
stratify_encoded = encodeLabels(main_data_full$academycode, school_encoding)
student_encoding = generateEncoding(main_data_full$studyid)
student_encoded = encodeLabels(main_data_full$studyid, student_encoding)
period_encoding = generateEncoding(main_data_full$period)
period_encoded = encodeLabels(main_data_full$period, period_encoding)
x_mat = data.frame('const' = rep(1, length(outcome)))
x_mat['t1a'] = as.numeric(main_data_full$treatment_old == 't1a' |
main_data_full$treatment_old == 'T1_A') * main_data_full$treatment_period
x_mat['t1b'] = as.numeric(main_data_full$treatment_old == 't1b'|
main_data_full$treatment_old == 'T1_B') * main_data_full$treatment_period
x_mat['t1c'] = as.numeric(main_data_full$treatment_old == 't1c'|
main_data_full$treatment_old == 'T1_C') * main_data_full$treatment_period
x_mat['t2a'] = as.numeric(main_data_full$treatment_old == 't2a'|
main_data_full$treatment_old == 'T2_A') * main_data_full$treatment_period
x_mat['t2b'] = as.numeric(main_data_full$treatment_old == 't2b'|
main_data_full$treatment_old == 'T2_B') * main_data_full$treatment_period
x_mat['t2c'] = as.numeric(main_data_full$treatment_old == 't2c'|
main_data_full$treatment_old == 'T2_C') * main_data_full$treatment_period
dim(x_mat)
flag_remove_schools_rounding = F
# Open dataset
main_file_name = '211011_cwpm_no_complete_panel_no_imputed.csv'
#main_file_name = '211011_cwpm_complete_panel_no_imputed.csv'
main_data_full = read.csv(paste('./bridge/data/main_datasets/', main_file_name, sep = ''))
dim(main_data_full)
# Author: Bruno Esposito
# This script generates RCT simulation that bootstraps the original engagement dataset and
#   estimates (i) a bayesian model with Exploration Sampling, (ii) a bayesian model with RCT, and
#   (iii) a mixed model with RCT.
# We do not simulate wave 1, only wave 2. We bootstrap wave 2 only from the original wave 1 and 2 sample.
# Used seeds:
# Bruno:
# 220204
# 220205
# 220207
# 220208
# 220209
# 220210
# 220211
# 220212
# 220213
# 220214
# Anja:
# 220206
rm(list = ls())
devtools::load_all()
library(logging)
library(lme4)
start_time = Sys.time()
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
date_save = '220214'
set.seed(date_save)
raw_data = read.csv('./bridge/data/wave2/engagement/210824_raw_data_rct_sim.csv')
dim(raw_data)
raw_data_wave1 = read.csv('./bridge/data/wave1/engagement/210610_clean_data.csv')
final_treatment_w1 = read.csv('./bridge/data/main_datasets/210511_w1_finaltreatment.csv', sep = ';')
names(final_treatment_w1) = c('studyid', 'treatment_final')
academy_optin_df = read.csv('./bridge/data/main_datasets/210812_wave1_final_allocation_opt_in.csv', sep = ',')
final_treatment_w1$treatment_final = substr(final_treatment_w1$treatment_final, 0, 4)
final_treatment_w1$treatment_final = sapply(final_treatment_w1$treatment_final, gsub, pattern='_', replacement='')
final_treatment_w1$wave = 1
raw_data_wave1 = merge(raw_data_wave1, final_treatment_w1, by = 'studyid', all.x = T)
raw_data_wave1 = merge(raw_data_wave1, academy_optin_df[c('studyid', 'academycode_optin')], by = 'studyid')
# Open Wave 2
# Check that you are working with the latest data!
raw_data_wave2 = read.csv('./bridge/data/wave2/engagement/210716_clean_data.csv')
final_treatment_w2 = read.csv('./bridge/data/main_datasets/210812_wave2_final_allocation_opt_in.csv')
final_treatment_w2$treatment_final = tolower(sapply(final_treatment_w2$treatment, gsub, pattern='_', replacement=''))
final_treatment_w2 = final_treatment_w2[c('studyid', 'treatment_final', 'academycode_optin')]
final_treatment_w2$wave = 2
raw_data_wave2 = merge(raw_data_wave2, final_treatment_w2, by = 'studyid', all.x = T)
raw_data = rbind(raw_data_wave1, raw_data_wave2)
dim(raw_data)
dim(wave1)
dim(raw_data_wave1)
outcome_table = matrix(NA, nrow = 6, ncol = 3)
treat_list = c('t1a', 't1b', 't1c', 't2a', 't2b', 't2c')
cont = 1
for (treat in treat_list) {
outcome_table[cont,1] = mean(raw_data_wave1$total_times_started_ex[raw_data_wave1$treatment_final == treat])
outcome_table[cont,2] = mean(raw_data_wave2$total_times_started_ex[raw_data_wave2$treatment_final == treat])
outcome_table[cont,3] = mean(raw_data$total_times_started_ex[raw_data$treatment_final == treat])
cont = cont + 1
}
rownames(outcome_table) = treat_list
colnames(outcome_table) = c('Wave1', 'Wave2', 'Wave12')
outcome_table = as.data.frame(outcome_table)
outcome_table
load(file="./bridge/reports/210728_Bridge/2201_engagement_wave2.RData")
outcome_table = data.frame(treatment = c('T1A','T1B','T1C','T2A','T2B','T2C'),
#succ_eng = tapply(raw_data$total_times_started_ex, raw_data$treatment_old, sum),
succ_attempt = as.numeric(table(raw_data$treatment_old)*9),
prob_success = paste(round(tapply(outcome/9, treatment, mean)*100,2), '%', sep = ''),
post_mean = paste(round(apply(coefs2, 2, mean),2)),
post_sd = paste(round(apply(coefs2, 2, sd),2)),
#regret = round(expectedRegretFeasible(coefs2),3),
prob_optimal = paste(round(thompson_shares2*100,2), '%', sep = ''),
prob_success_model = paste(round(avg_prob_betas*100,2), '%', sep = ''),
regret_in_prob = paste(round(posterior_loss*100,2), '%', sep = '')
)
dim(outcome)
length(outcome)
outcome_table
tapply(outcome/9, treatment, mean)*100,2)
tapply(outcome/9, treatment, mean)*100)
tapply(outcome/9, treatment, mean)
tapply(raw_data$total_times_started_ex/9, treatment, mean)
mean(raw_data$total_times_started_ex[raw_data$treatment_final == treat])
outcome_table = matrix(NA, nrow = 6, ncol = 3)
treat_list = c('t1a', 't1b', 't1c', 't2a', 't2b', 't2c')
cont = 1
for (treat in treat_list) {
#outcome_table[cont,1] = mean(raw_data_wave1$total_times_started_ex[raw_data_wave1$treatment_final == treat])
#outcome_table[cont,2] = mean(raw_data_wave2$total_times_started_ex[raw_data_wave2$treatment_final == treat])
outcome_table[cont,3] = mean(raw_data$total_times_started_ex[raw_data$treatment_final == treat])
cont = cont + 1
}
rownames(outcome_table) = treat_list
colnames(outcome_table) = c('Wave1', 'Wave2', 'Wave12')
outcome_table = as.data.frame(outcome_table)
outcome_table
tapply(raw_data$total_times_started_ex/9, raw_data$treatment_final, mean)
tapply(raw_data$total_times_started_ex/9, raw_data$treatment_old, mean)
